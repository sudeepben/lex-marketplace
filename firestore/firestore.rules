// firestore/firestore.rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Owner checks
    function isOwner() {
      return isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    function isCreatingOwn() {
      return isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }

    // Product validation mirroring your Zod schema
    function validProduct(data) {
      return
        data.title is string &&
        data.title.size() >= 2 && data.title.size() <= 80 &&

        data.price is number &&
        data.price >= 0 &&

        data.inventory is int &&
        data.inventory >= 0 &&

        data.condition in ['new', 'used', 'refurbished'] &&

        data.category is string &&
        data.category.size() >= 2 &&

        data.visibility in ['public', 'private'] &&

        data.pickup is bool &&

        data.photos is list &&
        data.photos.size() <= 12 &&

        data.shipOptions is list;
    }

    // Products live under: /orgs/{orgId}/apps/{appId}/products/{productId}
    match /orgs/{orgId}/apps/{appId}/products/{productId} {

      // Public can read only public items
      allow read: if resource.data.visibility == "public";

      // Owner can create/update/delete their own product
      allow create: if isCreatingOwn() && validProduct(request.resource.data);
      allow update: if isOwner() && validProduct(request.resource.data);
      allow delete: if isOwner();
    }

    // (Weâ€™ll add rules for add-ons like Reviews/Bookmarks later.)
  }
}
